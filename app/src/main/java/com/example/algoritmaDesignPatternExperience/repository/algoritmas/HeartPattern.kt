package com.example.algoritmaDesignPatternExperience.repository.algoritmas

import kotlin.math.pow
import kotlin.math.sqrt

/**
 *  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . * * * * * * * . . . . . . . * * * * * * * . . . . . . . . . . . .
 *  . . . . . . . . . . * * * * * * * * * * * . . . * * * * * * * * * * * . . . . . . . . . .
 *  . . . . . . . . . * * * * * * * * * * * * * . * * * * * * * * * * * * * . . . . . . . . .
 *  . . . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . .
 *  . . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . .
 *  . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . .
 *  . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . .
 *  . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . .
 *  . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . .
 *  . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . .
 *  . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . .
 *  . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . .
 *  . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . .
 *  . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . .
 *  . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . .
 *  . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . .
 *  . . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . .
 *  . . . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . .
 *  . . . . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . .
 *  . . . . . . . . . . * * * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . .
 *  . . . . . . . . . . . * * * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . .
 *  . . . . . . . . . . . . * * * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . .
 *  . . . . . . . . . . . . . * * * * * * * * * * * * * * * * * * * . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . * * * * * * * * * * * * * * * * * . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . * * * * * * * * * * * * * * * . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . * * * * * * * * * * * * * . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . * * * * * * * * * * * . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . * * * * * * * * * . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . * * * * * * * . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . * * * * * . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . . * * * . . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . . . * . . . . . . . . . . . . . . . . . . . . . .
 *  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 *
*/
class HeartPatternImp: HeartPattern {
    override fun solution(size: Int) {
        // nested for loop to print the upper part of Heart
        for (m in 0 until size) {
            for (n in 0..4 * size) {
                val pos1 = sqrt(
                    (m - size).toDouble().pow(2.0) + Math.pow(
                        (n - size).toDouble(),
                        2.0
                    )
                )
                val pos2 = Math.sqrt(
                    Math.pow(
                        (m - size).toDouble(),
                        2.0
                    ) + (n - 3 * size).toDouble().pow(2.0)
                )
                if (pos1 < size + 0.5 || pos2 < size + 0.5) {
                    print('*')
                } else {
                    print(' ')
                }
            }
            print(System.lineSeparator())
        }
        // for loop to print the lower part of Heart
        for (m in 1..2 * size) {
            for (n in 0 until m) {
                print(' ')
            }
            for (n in 0 until 4 * size + 1 - 2 * m) {
                print("*")
            }
            print(System.lineSeparator())
        }
    }

}

interface HeartPattern {
    fun solution(size: Int)
}
